
#include <stdio.h>
#include <x86asm.h>
#include <x86dis.h>

int main(int argc, char* argv[])
{
	//∑¥ª„±‡≤‚ ‘
	printf("∑¥ª„±‡≤‚ ‘\n");
	x86dis	decoder(X86_OPSIZE32,X86_ADDRSIZE32);

	unsigned char data[] = {
		/*0x12, 0x34,*/ 0x6A, 0x00, 0xE8, 0x71, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x30, 0x40, 0x00, 0xEB, 0x02, 
		0x12, 0x34, 0x33, 0xC9, 0xF3, 0xAB, 0xE8, 0x71, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x68, 0x38, 0x10, 
		0x40, 0x00, 0x6A, 0x00, 0x6A, 0x65, 0xFF, 0x35, 0x00, 0x30, 0x40, 0x00, 0xE8, 0x4F, 0x00, 0x00, 
		0x00, 0x6A, 0x00, 0xE8, 0x3C, 0x00, 0x00, 0x00, 0x55, 0x8B, 0xEC, 0x8B, 0x45, 0x0C, 0x3D, 0x10, 
		0x01, 0x00, 0x00, 0x75, 0x02, 0xEB, 0x23, 0x3D, 0x11, 0x01, 0x00, 0x00, 0x75, 0x02, 0xEB, 0x1A, 
		0x83, 0xF8, 0x10, 0x75, 0x0C, 0x6A, 0x00, 0xFF, 0x75, 0x08, 0xE8, 0x27, 0x00, 0x00, 0x00, 0xEB, 
		0x09, 0xB8, 0x00, 0x00, 0x00, 0x00, 0xC9, 0xC2, 0x10, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xC9, 
		0xC2, 0x10, 0x00, 0xCC, 0xFF, 0x25, 0x0C, 0x20, 0x40, 0x00, 0xFF, 0x25, 0x08, 0x20, 0x40, 0x00, 
		0xFF, 0x25, 0x18, 0x20, 0x40, 0x00, 0xFF, 0x25, 0x14, 0x20, 0x40, 0x00, 0xFF, 0x25, 0x00, 0x20, 
		0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	CPU_ADDR	addr;
	addr.addr32.seg = 0;
	addr.addr32.offset = 0x401002;
	for (int i=0;i<sizeof(data);)
	{
		x86dis_insn* insn = (x86dis_insn*)decoder.decode(data+i,sizeof(data)-i,addr);
		const char* pcsIns = decoder.str(insn,DIS_STYLE_HEX_ASMSTYLE | DIS_STYLE_HEX_UPPERCASE | DIS_STYLE_HEX_NOZEROPAD | DIS_STYLE_SIGNED);
		printf("%08X\t%s\n",addr.addr32.offset, pcsIns);
		addr.addr32.offset += insn->size;
		i += insn->size;
	}

	//ª„±‡≤‚ ‘
	x86asm	encoder(X86_OPSIZE32,X86_ADDRSIZE32);

	encoder.set_imm_eval_proc(NULL,NULL);

	const char* psAsmTxt = "add eax,123456h";

	printf("±‡“Îª„±‡÷∏¡Ó£∫%s\n",psAsmTxt);
	asm_insn* pInsn = encoder.alloc_insn();
	if (!encoder.translate_str(pInsn,psAsmTxt))
	{
		printf("translate_str failed");
		return 0;
	}

	asm_code* pAsmCode = encoder.encode(pInsn,0,addr);

	int i = 0;
	while (pAsmCode)
	{
		char s[1024], *tmp = s;
		for (int i=0; i < pAsmCode->size; i++)
		{
			tmp += sprintf(tmp, "%02x ", pAsmCode->data[i]);
		}
		pAsmCode = pAsmCode->next;
		++i;
		printf("ª˙∆˜¬Î%d:%s\n",i,s);
	}

	return 0;
}

